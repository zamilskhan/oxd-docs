{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to the oxd Documentation\n\n\nIntroduction\n\n\noxd is a mediator, a service demon that listens on localhost, providing easy APIs that can be called by a web application to simplify using an external OAuth2 server for authentication or authorization. oxd is not a proxy--sometimes it makes API calls on behalf of an application, but other times it just forms the right URLs and returns them to the application. \n\n\nOne significant advantage of using oxd over a native client library is that oxd consolidates the OAuth2 code in one package. If there are updates to the OAuth2 client code, you can update the oxd-server package, without changing the interface to the application.\n\n\n\n\nLicense\n\n\noxd is \ncommercial software\n licensed by Gluu. Each deployment of the oxd server requires a license. To purchase licenses, visit the \noxd webpage\n.# OXD Docs",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-the-oxd-documentation",
            "text": "",
            "title": "Welcome to the oxd Documentation"
        },
        {
            "location": "/#introduction",
            "text": "oxd is a mediator, a service demon that listens on localhost, providing easy APIs that can be called by a web application to simplify using an external OAuth2 server for authentication or authorization. oxd is not a proxy--sometimes it makes API calls on behalf of an application, but other times it just forms the right URLs and returns them to the application.   One significant advantage of using oxd over a native client library is that oxd consolidates the OAuth2 code in one package. If there are updates to the OAuth2 client code, you can update the oxd-server package, without changing the interface to the application.",
            "title": "Introduction"
        },
        {
            "location": "/#license",
            "text": "oxd is  commercial software  licensed by Gluu. Each deployment of the oxd server requires a license. To purchase licenses, visit the  oxd webpage .# OXD Docs",
            "title": "License"
        },
        {
            "location": "/protocol/",
            "text": "oxd server overview\n\n\noxd makes it super simple to authenticate a person with OpenID Connect, \nto protect web resources with OAuth2, or to write a client that calls an \nOAuth2 protected API. \n\n\nThe oxd Server is designed to work as a standalone service demon. It's \nactually a web server, running in an embedded \n\nJetty\n server.  Just start it and stop \nit like you would any other unix service.\n\n\noxd's API's make it easier for developers to use OAuth2 protocols.  By \ndefault, it's restricted to \nlocalhost,\n which means these API's cannot \nbe reached from another server on the network--only by services running \nlocally server. You deploy oxd on each server that has web \napplications. Gluu is introducing an nginx-based gateway that will \nenable the centralized deployment of an oxd server (and will\nrequire clients to use https to connect to it)--stay tuned.\n\n\noxd API's can be called with by any application that can make REST \ncalls.  Gluu also provides several native libraries that wrap the\noxd APIs, currently available for Php, Java, Python, Node, Ruby and C#.\n\n\noxd is commercial software. There is a free version that is limited \nto two transactions per second--which is enough for a low volume web \nsite. For more information on purchasing a commercial version of oxd, \nsee the \nwebsite\n\n\n\n\nOpenID Connect Authentication Overview\n\n\nOpenID Connect is one of the most popular API's for an application \nto identify a person. Technically it is not an authentication protocol--\nit enables a person to authorize the release of information to \nan application from a remote \"identity provider\". In the\nprocess, of authorizting this release, the person is authenticated (if \nno previous session exists). If you are familiar with Google \nauthentication, you've used OpenID Connect. \n\n\nIf you want to launch an OpenID Connect Provider for your organization, \nyou should consider deploying the Gluu Server, which is available for \nmany Linux distributions, and is easy to install \nand configure. For more information, see our \nwebsite\n. \nThe Gluu Server will enable your organization to consolidate \nauthentication in one place, and to enable Single Sign-on (SSO) to many \napplications. It's a standard OpenID Connect Provider, but it also \nsupports SAML.\n\n\noxd uses the Authorization Code Flow for authentication. Future versions \nof oxd may support the Hybrid Flow. Implicit Flow is not supported \nbecause it is intended for Javascript client-side applications where \nthe client does not authenticate.\n\n\noxd provides six API's for OpenID Connect authentication. In general,\nyou can think of the Authorization Code Flow as a three step process: \n\n\n\n\nRedirect person to the authorization URL and obtain a code\n\n\nUse code to obtain tokens (access, id_token, refresh)\n\n\nUse access token to obtain user claims\n\n\n\n\nThe other three oxd API's are:\n\n\n\n\nRegister site (called once--the first time your application uses oxd)\n\n\nUpdate site registration (not used often)\n\n\nLogout\n\n\n\n\nRegister site\n\n\nFirst of all, the web site must register itself with oxd server. If \nregistration is successful, ox will return an identifier for the \napplication, which must be presented in subsequent API calls. This\nis the \noxd-id\n, not to be confused with the OpenID Connect client id.\n\n\nDuring the registration operation, oxd will dynamically register an \nOpenID Connect client and save its configuration.\n\n\nAll parameters to \nregister_site\n are optional except the \n\nauthorization_redirect_uri\n. This is the URL on your website that the \nOpenID Connect Provider (OP) will redirect the person to after \nsuccessful authorization.\n\n\nregister_site\n has many parameters, but you can ignore most of them!\nDefault configuration values are taken from\n\nconf/oxd-default-site-config.json\n.\nEven most of these options may be blank, with one exception: if the \n\nop_host\n is missing from the \nregister_site\n command parameters, \nit must be present in this file--we need to know which OpenID Provider\nwill be used! \n\n\nThe \nregister_site\n command returns \noxd_id\n. Several applications may \nshare an instance of oxd, and this identifier is used by oxd to \ndistinguish differences in configuration between them.\n\n\nop_host\n must point to a valid OpenID Connect Provider that supports \n\nclient registration\n, \nfor example, a \nGluu Server CE installation\n. \nSample: \n\"op_host\":\"https://idp.example.org\"\n\n\nRequest:\n\n\n{\n    \"command\":\"register_site\",\n    \"params\": {\n        \"authorization_redirect_uri\": \"https://client.example.org/cb\", <- REQUIRED\n        \"op_host\":\"https://ce-dev.gluu.org\"                            <- OPTIONAL (But if missing, must be present in defaults)\n        \"post_logout_redirect_uri\": \"https://client.example.org/cb\",   <- OPTIONAL \n        \"application_type\": \"web\",                                     <- OPTIONAL\n        \"response_types\": [\"code\"],                                    <- OPTIONAL\n        \"grant_types\": [\"authorization_code\"],                         <- OPTIONAL \n        \"scope\": [\"openid\"],                                           <- OPTIONAL\n        \"acr_values\": [\"basic\"],                                       <- OPTIONAL\n        \"client_name\": \"\",                                             <- OPTIONAL\n        \"client_jwks_uri\": \"\",                                         <- OPTIONAL\n        \"client_token_endpoint_auth_method\": \"\",                       <- OPTIONAL\n        \"client_request_uris\": [],                                     <- OPTIONAL\n        \"client_logout_uris\": [],                                      <- OPTIONAL\n        \"client_sector_identifier_uri\": [],                            <- OPTIONAL\n        \"contacts\": [\"foo_bar@spam.org\"],                              <- OPTIONAL\n        \"ui_locales\": [],                                              <- OPTIONAL\n        \"claims_locales\": [],                                          <- OPTIONAL\n        \"client_id\": \"<client id of existing client>\",                 <- OPTIONAL ignores all other parameters and skips new client registration forcing to use existing client (client_secret is required if this parameter is set)\n        \"client_secret\": \"<client secret of existing client>\"          <- OPTIONAL must be used together with client_secret.\n    }\n}\n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",\n        \"op_host\":\"https://ce-dev.gluu.org\"                           <- useful in case op_host is set in oxd-default-site-config.json (and not provided as parameter)\n    }\n}\n\n\n\n\nUpdate site registration\n\n\nAPI used to update a current registration.\n\n\nRequest:\n\n\n{\n    \"command\":\"update_site_registration\",\n    \"params\": {\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",              <- REQUIRED\n        \"authorization_redirect_uri\": \"https://client.example.org/cb\",<- OPTIONAL \n        \"post_logout_redirect_uri\": \"https://client.example.org/cb\",  <- OPTIONAL \n        \"client_logout_uris\":[\"https://client.example.org/logout\"],   <- OPTIONAL\n        \"response_type\":[\"code\"],                                     <- OPTIONAL\n        \"grant_types\":[],                                             <- OPTIONAL\n        \"scope\": [\"opeind\", \"profile\"],                               <- OPTIONAL\n        \"acr_values\": [\"duo\"],                                        <- OPTIONAL\n        \"client_name\": \"\",                                            <- OPTIONAL\n        \"client_secret_expires_at\":1335205592410,                     <- OPTIONAL can be used to extends client lifetime (milliseconds since 1970)\n        \"client_jwks_uri\": \"\",                                        <- OPTIONAL\n        \"client_token_endpoint_auth_method\": \"\",                      <- OPTIONAL\n        \"client_request_uris\":[],                                     <- OPTIONAL\n        \"client_logout_uris\":[],                                      <- OPTIONAL\n        \"client_sector_identifier_uri\":\"\",                            <- OPTIONAL\n        \"contacts\":[\"foo_bar@spam.org\"],                              <- OPTIONAL\n        \"ui_locales\":[],                                              <- OPTIONAL\n        \"claims_locales\":[],                                          <- OPTIONAL\n    }\n}\n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\"\n    }\n}\n\n\n\n\nGet authorization url\n\n\nReturns the URL at the OpenID Provider (OP) to which your application \nmust redirect the person to authorize the release of personal data (and\nperhaps be authenticated in the process if no previous session exists).\nThe Response from the OP will include the code and state \nvalues, which should be used to subsequently obtain tokens.\n\n\nRequest:\n\n\n{\n    \"command\":\"get_authorization_url\",\n    \"params\": {\n        \"oxd_id\": \"6F9619FF-8B86-D011-B42D-00CF4FC964FF\", <- required, obtained after registration\n        \"scope\": [\"openid\"],                              <- optional, may be skipped (by default takes scopes that was registered during register_site command)\n        \"acr_values\": [\"duo\"],                            <- optional, may be skipped (default is basic)\n        \"prompt\": \"login\"                                 <- optional, skipped if no value specified or missed. prompt=login is required if you want to force alter current user session (in case user is already logged in from site1 and site2 construsts authorization request and want to force alter current user session)\n        \"hd\": \"mycollege.edu\"                             <- optional, hosted domain google OP parameter https://developers.google.com/identity/protocols/OpenIDConnect#hd-param\n    }\n}\n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"authorization_url\":\"  https://server.example.com/authorize?response_type=code\n    &client_id=s6BhdRkqt3\n    &redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb\n    &scope=openid%20profile\n    &acr_values=duo\n    &state=af0ifjsldkj\n    &nonce=n-0S6_WzA2Mj\n    &hd=mycollege.edu\"\n    }\n}\n\n\n\n\nAfter redirecting to the above URL, the OpenID Provider will return a \nresponse that looks like this to the URL your application registered as \nthe redirect URI (parse out the code and state):\n\n\nHTTP/1.1 302 Found\nLocation: https://client.example.org/cb?code=SplxlOBeZQQYbYS6WxSbIA&state=af0ifjsldkj&scopes=openid%20profile\n\n\n\n\nGet Tokens (ID & Access) by Code\n\n\nUse the code and state obtained in the previous step to call this API to retrieve tokens.\n\n\nRequest:\n\n\n{\n    \"command\":\"get_tokens_by_code\",\n    \"params\": {\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\", <- Required\n        \"code\":\"I6IjIifX0\",                              <- Required, code from OP redirect url (see example above)\n        \"state\":\"af0ifjsldkj\"                            <- Required\n    }\n}\n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"access_token\":\"SlAV32hkKG\",\n        \"expires_in\":3600,\n        \"refresh_token\":\"aaAV32hkKG1\"\n        \"id_token\":\"eyJ0 ... NiJ9.eyJ1c ... I6IjIifX0.DeWt4Qu ... ZXso\",\n        \"id_token_claims\": {\n             \"iss\": \"https://server.example.com\",\n             \"sub\": \"24400320\",\n             \"aud\": \"s6BhdRkqt3\",\n             \"nonce\": \"n-0S6_WzA2Mj\",\n             \"exp\": 1311281970,\n             \"iat\": 1311280970,\n             \"at_hash\": \"MTIzNDU2Nzg5MDEyMzQ1Ng\"\n        }\n    }\n}\n\n\n\n\nGet User Info\n\n\nUse the access token from the step above to retrieve a JSON object \nwith the user claims.\n\n\nRequest:\n\n\n{\n    \"command\":\"get_user_info\",\n    \"params\": {\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",\n        \"access_token\":\"SlAV32hkKG\"\n    }\n}\n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"claims\":{\n            \"sub\": [\"248289761001\"],\n            \"name\": [\"Jane Doe\"],\n            \"given_name\": [\"Jane\"],\n            \"family_name\": [\"Doe\"],\n            \"preferred_username\": [\"j.doe\"],\n            \"email\": [\"janedoe@example.com\"],\n            \"picture\": [\"http://example.com/janedoe/me.jpg\"]\n        }\n    }\n}\n\n\n\n\nLog out URI\n\n\nUses front channel logout--a page is returned with iFrames, each of \nwhich contains the logout URL of the applications that have a session \nin that browser. These iFrames should be loaded automatically--enabling \neach application to get a notification of logout, and to hopefully clean \nup any cookies in the person's browser. If the person blocks \n\nthird-party cookies\n\nin their browser, logout will not work.\n\n\nRequest:\n\n\n{\n    \"command\":\"get_logout_uri\",\n    \"params\": {\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",\n        \"id_token_hint\": \"eyJ0 ... NiJ9.eyJ1c ... I6IjIifX0.DeWt4Qu ... ZXso\",<-- OPTIONAL (oxd server will use last used ID Token)\n        \"post_logout_redirect_uri\": \"<post logout redirect uri here>\",        <-- OPTIONAL\n        \"state\": \"<site state>\",                                              <-- OPTIONAL\n        \"session_state\": \"<session state>\"                                    <-- OPTIONAL\n    }\n}\n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"uri\":\"https://<server>/end_session?id_token_hint=<id token>&state=<state>&post_logout_redirect_uri=<...>\"\n    }\n}\n\n\n\n\nUMA Resource Server API's\n\n\nA client, acting as an \nOAuth2 Resource Server\n,\nMUST:\n\n\n\n\nRegister a protection document (with uma_rs_protect command)\n\n\nIntercept HTTP call (before actual REST resource call) and check whether it's allowed to proceed with call or reject it according to uma_rs_check_access command response:\n\n\nAllow access - if response from uma_rs_check_access is \"allowed\" or \"not_protected\" error is returned.\n\n\numa_rs_check_access returned \"denied\" with ticket then return back HTTP response\n\n\n\n\n\n\n\n\nHTTP/1.1 401 Unauthorized\nWWW-Authenticate: UMA realm=\"example\",\n      as_uri=\"https://as.example.com\",\n      ticket=\"016f84e8-f9b9-11e0-bd6f-0021cc6004de\"\n\n\n\n\n- uma_rs_check_access returned \"denied\" without ticket then return back HTTP response\n\n\n\nHTTP/1.1 403 Forbidden\nWarning: 199 - \"UMA Authorization Server Unreachable\"\n\n\n\n\nUMA RS Protect resources\n\n\nRequest:\n\n\n{\n    \"command\":\"uma_rs_protect\",\n    \"params\": {\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",   <- REQUIRED\n        \"resources\":[        <-  REQUIRED as parameter here we have protection json that describes resources on RS\n            {\n                \"path\":\"/photo\",\n                \"conditions\":[\n                    {\n                        \"httpMethods\":[\"GET\"],\n                        \"scopes\":[\n                            \"http://photoz.example.com/dev/actions/view\"\n                        ]\n                    },\n                    {\n                        \"httpMethods\":[\"PUT\", \"POST\"],\n                        \"scopes\":[\n                            \"http://photoz.example.com/dev/actions/all\",\n                            \"http://photoz.example.com/dev/actions/add\"\n                        ],\n                        \"ticketScopes\":[\n                            \"http://photoz.example.com/dev/actions/add\"\n                        ]\n                    }\n                ]\n            },\n            {\n                \"path\":\"/document\",\n                \"conditions\":[\n                    {\n                        \"httpMethods\":[\"GET\"],\n                        \"scopes\":[\n                            \"http://photoz.example.com/dev/actions/view\"\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n}\n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\"\n}\n\n\n\n\nUMA RS Check Access\n\n\nRequest:\n\n\n{\n    \"command\":\"uma_rs_check_access\",\n    \"params\": {\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",\n        \"rpt\":\"eyJ0 ... NiJ9.eyJ1c ... I6IjIifX0.DeWt4Qu ... ZXso\",    <-- REQUIRED RPT or blank value if absent (not send by RP)\n        \"path\":\"<path of resource>\",                                   <-- REQUIRED Path of resource (e.g. http://rs.com/phones), /phones should be passed\n        \"http_method\":\"<http method of RP request>\"                    <-- REQUIRED Http method of RP request (GET, POST, PUT, DELETE)\n    }\n}\n\n\n\n\nSample of RP request:\n\n\nGET /users/alice/album/photo HTTP/1.1\nAuthorization: Bearer vF9dft4qmT\nHost: photoz.example.com\n\n\n\n\nParams:\n\n\nrpt: 'vF9dft4qmT'\npath: /users/alice/album/photo\nhttp_method: GET\n\n\n\n\nAccess Granted response:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"access\":\"granted\"\n    }\n}\n\n\n\n\nAccess Denied with ticket response:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"access\":\"denied\"\n        \"www-authenticate_header\":\"UMA realm=\\\"example\\\",\n                                   as_uri=\\\"https://as.example.com\\\",\n                                   error=\\\"insufficient_scope\\\",\n                                   ticket=\\\"016f84e8-f9b9-11e0-bd6f-0021cc6004de\\\"\",\n        \"ticket\":\"016f84e8-f9b9-11e0-bd6f-0021cc6004de\"\n    }\n}\n\n\n\n\nAccess Denied without ticket response:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"access\":\"denied\"\n    }\n}\n\n\n\n\nErrors:\n\n\nResource is not protected\n\n\n{\n    \"status\":\"error\",\n    \"data\":{\n        \"error\":\"invalid_request\",\n        \"error_description\":\"Resource is not protected. Please protect your resource first with uma_rs_protect command.\"\n    }\n}\n\n\n\n\nUMA Client API's\n\n\nIf your appliation is calling UMA protected resources, use these API's to obtain an RPT token.\n\n\nUMA RP - Get RPT\n\n\nFor latest and most up to date parameters of command please check latest successful \njenkins build\n\n\nRequest:\n\n\n{\n    \"command\":\"uma_rp_get_rpt\",\n    \"params\": {\n         \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",  <- REQUIRED\n         \"force_new\": false                                <- REQUIRED indicates whether return new RPT, in general should be false, so oxd server can cache/reuse same RPT\n    }\n}\n\n\n\n\nResponse:\n\n\n{\n     \"status\":\"ok\",\n     \"data\":{\n         \"rpt\":\"vF9dft4qmT\"\n     }\n}\n\n\n\n\nUMA RP - Authorize RPT\n\n\nRequest:\n\n\n{\n    \"command\":\"uma_rp_authorize_rpt\",\n    \"params\": {\n         \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",  <- REQUIRED\n         \"rpt\": \"vF9dft4qmT\",                              <- REQUIRED\n         \"ticket\": \"016f84e8-f9b9-11e0-bd6f-0021cc6004de\"  <- REQUIRED\n    }\n}\n\n\n\n\nAuthorized Response (Success):\n\n\n{\n     \"status\":\"ok\",\n}\n\n\n\n\nNot authorized error:\n\n\n{\n    \"status\":\"error\",\n    \"data\":{\n        \"code\":\"not_authorized\",\n        \"description\":\"RPT is not authorized.\"\n    }\n}\n\n\n\n\nInvalid ticket error:\n\n\n{\n    \"status\":\"error\",\n    \"data\":{\n        \"code\":\"invalid_ticket\",\n        \"description\":\"Ticket is not valid (outdated or not present on Authorization Server).\"\n    }\n}\n\n\n\n\nInvalid rpt error:\n\n\n{\n    \"status\":\"error\",\n    \"data\":{\n        \"code\":\"invalid_rpt\",\n        \"description\":\"RPT is not valid (outdated or not present on Authorization Server).\"\n    }\n}\n\n\n\n\nGluu OAuth2 Access Management API's\n\n\nGAT stands for Gluu Access Token. It is invented by Gluu and is described here: \nhttps://ox.gluu.org/doku.php?id=uma:oauth2_access_management.\n\n\nRequest:\n\n\n{\n    \"command\":\"uma_rp_get_gat\",\n    \"params\": {\n         \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",  <- REQUIRED\n         \"scopes\": [                                       <- REQUIRED RP should know required scopes in advance\n             \"http://photoz.example.com/dev/actions/add\",\n             \"http://photoz.example.com/dev/actions/view\",\n             \"http://photoz.example.com/dev/actions/edit\"\n         ]\n    }\n}\n\n\n\n\nResponse:\n\n\n{\n     \"status\":\"ok\",\n     \"data\":{\n         \"rpt\":\"fg6vF9dft4qmT\"\n     }\n}\n\n\n\n\nReferences\n\n\n\n\nUMA 1.0.1 Specification\n\n\nSample RS of Java Resteasy HTTP interceptor of uma-rs",
            "title": "Protocol"
        },
        {
            "location": "/protocol/#oxd-server-overview",
            "text": "oxd makes it super simple to authenticate a person with OpenID Connect, \nto protect web resources with OAuth2, or to write a client that calls an \nOAuth2 protected API.   The oxd Server is designed to work as a standalone service demon. It's \nactually a web server, running in an embedded  Jetty  server.  Just start it and stop \nit like you would any other unix service.  oxd's API's make it easier for developers to use OAuth2 protocols.  By \ndefault, it's restricted to  localhost,  which means these API's cannot \nbe reached from another server on the network--only by services running \nlocally server. You deploy oxd on each server that has web \napplications. Gluu is introducing an nginx-based gateway that will \nenable the centralized deployment of an oxd server (and will\nrequire clients to use https to connect to it)--stay tuned.  oxd API's can be called with by any application that can make REST \ncalls.  Gluu also provides several native libraries that wrap the\noxd APIs, currently available for Php, Java, Python, Node, Ruby and C#.  oxd is commercial software. There is a free version that is limited \nto two transactions per second--which is enough for a low volume web \nsite. For more information on purchasing a commercial version of oxd, \nsee the  website",
            "title": "oxd server overview"
        },
        {
            "location": "/protocol/#openid-connect-authentication-overview",
            "text": "OpenID Connect is one of the most popular API's for an application \nto identify a person. Technically it is not an authentication protocol--\nit enables a person to authorize the release of information to \nan application from a remote \"identity provider\". In the\nprocess, of authorizting this release, the person is authenticated (if \nno previous session exists). If you are familiar with Google \nauthentication, you've used OpenID Connect.   If you want to launch an OpenID Connect Provider for your organization, \nyou should consider deploying the Gluu Server, which is available for \nmany Linux distributions, and is easy to install \nand configure. For more information, see our  website . \nThe Gluu Server will enable your organization to consolidate \nauthentication in one place, and to enable Single Sign-on (SSO) to many \napplications. It's a standard OpenID Connect Provider, but it also \nsupports SAML.  oxd uses the Authorization Code Flow for authentication. Future versions \nof oxd may support the Hybrid Flow. Implicit Flow is not supported \nbecause it is intended for Javascript client-side applications where \nthe client does not authenticate.  oxd provides six API's for OpenID Connect authentication. In general,\nyou can think of the Authorization Code Flow as a three step process:    Redirect person to the authorization URL and obtain a code  Use code to obtain tokens (access, id_token, refresh)  Use access token to obtain user claims   The other three oxd API's are:   Register site (called once--the first time your application uses oxd)  Update site registration (not used often)  Logout   Register site  First of all, the web site must register itself with oxd server. If \nregistration is successful, ox will return an identifier for the \napplication, which must be presented in subsequent API calls. This\nis the  oxd-id , not to be confused with the OpenID Connect client id.  During the registration operation, oxd will dynamically register an \nOpenID Connect client and save its configuration.  All parameters to  register_site  are optional except the  authorization_redirect_uri . This is the URL on your website that the \nOpenID Connect Provider (OP) will redirect the person to after \nsuccessful authorization.  register_site  has many parameters, but you can ignore most of them!\nDefault configuration values are taken from conf/oxd-default-site-config.json .\nEven most of these options may be blank, with one exception: if the  op_host  is missing from the  register_site  command parameters, \nit must be present in this file--we need to know which OpenID Provider\nwill be used!   The  register_site  command returns  oxd_id . Several applications may \nshare an instance of oxd, and this identifier is used by oxd to \ndistinguish differences in configuration between them.  op_host  must point to a valid OpenID Connect Provider that supports  client registration , \nfor example, a  Gluu Server CE installation . \nSample:  \"op_host\":\"https://idp.example.org\"  Request:  {\n    \"command\":\"register_site\",\n    \"params\": {\n        \"authorization_redirect_uri\": \"https://client.example.org/cb\", <- REQUIRED\n        \"op_host\":\"https://ce-dev.gluu.org\"                            <- OPTIONAL (But if missing, must be present in defaults)\n        \"post_logout_redirect_uri\": \"https://client.example.org/cb\",   <- OPTIONAL \n        \"application_type\": \"web\",                                     <- OPTIONAL\n        \"response_types\": [\"code\"],                                    <- OPTIONAL\n        \"grant_types\": [\"authorization_code\"],                         <- OPTIONAL \n        \"scope\": [\"openid\"],                                           <- OPTIONAL\n        \"acr_values\": [\"basic\"],                                       <- OPTIONAL\n        \"client_name\": \"\",                                             <- OPTIONAL\n        \"client_jwks_uri\": \"\",                                         <- OPTIONAL\n        \"client_token_endpoint_auth_method\": \"\",                       <- OPTIONAL\n        \"client_request_uris\": [],                                     <- OPTIONAL\n        \"client_logout_uris\": [],                                      <- OPTIONAL\n        \"client_sector_identifier_uri\": [],                            <- OPTIONAL\n        \"contacts\": [\"foo_bar@spam.org\"],                              <- OPTIONAL\n        \"ui_locales\": [],                                              <- OPTIONAL\n        \"claims_locales\": [],                                          <- OPTIONAL\n        \"client_id\": \"<client id of existing client>\",                 <- OPTIONAL ignores all other parameters and skips new client registration forcing to use existing client (client_secret is required if this parameter is set)\n        \"client_secret\": \"<client secret of existing client>\"          <- OPTIONAL must be used together with client_secret.\n    }\n}  Response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",\n        \"op_host\":\"https://ce-dev.gluu.org\"                           <- useful in case op_host is set in oxd-default-site-config.json (and not provided as parameter)\n    }\n}  Update site registration  API used to update a current registration.  Request:  {\n    \"command\":\"update_site_registration\",\n    \"params\": {\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",              <- REQUIRED\n        \"authorization_redirect_uri\": \"https://client.example.org/cb\",<- OPTIONAL \n        \"post_logout_redirect_uri\": \"https://client.example.org/cb\",  <- OPTIONAL \n        \"client_logout_uris\":[\"https://client.example.org/logout\"],   <- OPTIONAL\n        \"response_type\":[\"code\"],                                     <- OPTIONAL\n        \"grant_types\":[],                                             <- OPTIONAL\n        \"scope\": [\"opeind\", \"profile\"],                               <- OPTIONAL\n        \"acr_values\": [\"duo\"],                                        <- OPTIONAL\n        \"client_name\": \"\",                                            <- OPTIONAL\n        \"client_secret_expires_at\":1335205592410,                     <- OPTIONAL can be used to extends client lifetime (milliseconds since 1970)\n        \"client_jwks_uri\": \"\",                                        <- OPTIONAL\n        \"client_token_endpoint_auth_method\": \"\",                      <- OPTIONAL\n        \"client_request_uris\":[],                                     <- OPTIONAL\n        \"client_logout_uris\":[],                                      <- OPTIONAL\n        \"client_sector_identifier_uri\":\"\",                            <- OPTIONAL\n        \"contacts\":[\"foo_bar@spam.org\"],                              <- OPTIONAL\n        \"ui_locales\":[],                                              <- OPTIONAL\n        \"claims_locales\":[],                                          <- OPTIONAL\n    }\n}  Response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\"\n    }\n}  Get authorization url  Returns the URL at the OpenID Provider (OP) to which your application \nmust redirect the person to authorize the release of personal data (and\nperhaps be authenticated in the process if no previous session exists).\nThe Response from the OP will include the code and state \nvalues, which should be used to subsequently obtain tokens.  Request:  {\n    \"command\":\"get_authorization_url\",\n    \"params\": {\n        \"oxd_id\": \"6F9619FF-8B86-D011-B42D-00CF4FC964FF\", <- required, obtained after registration\n        \"scope\": [\"openid\"],                              <- optional, may be skipped (by default takes scopes that was registered during register_site command)\n        \"acr_values\": [\"duo\"],                            <- optional, may be skipped (default is basic)\n        \"prompt\": \"login\"                                 <- optional, skipped if no value specified or missed. prompt=login is required if you want to force alter current user session (in case user is already logged in from site1 and site2 construsts authorization request and want to force alter current user session)\n        \"hd\": \"mycollege.edu\"                             <- optional, hosted domain google OP parameter https://developers.google.com/identity/protocols/OpenIDConnect#hd-param\n    }\n}  Response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"authorization_url\":\"  https://server.example.com/authorize?response_type=code\n    &client_id=s6BhdRkqt3\n    &redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb\n    &scope=openid%20profile\n    &acr_values=duo\n    &state=af0ifjsldkj\n    &nonce=n-0S6_WzA2Mj\n    &hd=mycollege.edu\"\n    }\n}  After redirecting to the above URL, the OpenID Provider will return a \nresponse that looks like this to the URL your application registered as \nthe redirect URI (parse out the code and state):  HTTP/1.1 302 Found\nLocation: https://client.example.org/cb?code=SplxlOBeZQQYbYS6WxSbIA&state=af0ifjsldkj&scopes=openid%20profile  Get Tokens (ID & Access) by Code  Use the code and state obtained in the previous step to call this API to retrieve tokens.  Request:  {\n    \"command\":\"get_tokens_by_code\",\n    \"params\": {\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\", <- Required\n        \"code\":\"I6IjIifX0\",                              <- Required, code from OP redirect url (see example above)\n        \"state\":\"af0ifjsldkj\"                            <- Required\n    }\n}  Response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"access_token\":\"SlAV32hkKG\",\n        \"expires_in\":3600,\n        \"refresh_token\":\"aaAV32hkKG1\"\n        \"id_token\":\"eyJ0 ... NiJ9.eyJ1c ... I6IjIifX0.DeWt4Qu ... ZXso\",\n        \"id_token_claims\": {\n             \"iss\": \"https://server.example.com\",\n             \"sub\": \"24400320\",\n             \"aud\": \"s6BhdRkqt3\",\n             \"nonce\": \"n-0S6_WzA2Mj\",\n             \"exp\": 1311281970,\n             \"iat\": 1311280970,\n             \"at_hash\": \"MTIzNDU2Nzg5MDEyMzQ1Ng\"\n        }\n    }\n}  Get User Info  Use the access token from the step above to retrieve a JSON object \nwith the user claims.  Request:  {\n    \"command\":\"get_user_info\",\n    \"params\": {\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",\n        \"access_token\":\"SlAV32hkKG\"\n    }\n}  Response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"claims\":{\n            \"sub\": [\"248289761001\"],\n            \"name\": [\"Jane Doe\"],\n            \"given_name\": [\"Jane\"],\n            \"family_name\": [\"Doe\"],\n            \"preferred_username\": [\"j.doe\"],\n            \"email\": [\"janedoe@example.com\"],\n            \"picture\": [\"http://example.com/janedoe/me.jpg\"]\n        }\n    }\n}  Log out URI  Uses front channel logout--a page is returned with iFrames, each of \nwhich contains the logout URL of the applications that have a session \nin that browser. These iFrames should be loaded automatically--enabling \neach application to get a notification of logout, and to hopefully clean \nup any cookies in the person's browser. If the person blocks  third-party cookies \nin their browser, logout will not work.  Request:  {\n    \"command\":\"get_logout_uri\",\n    \"params\": {\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",\n        \"id_token_hint\": \"eyJ0 ... NiJ9.eyJ1c ... I6IjIifX0.DeWt4Qu ... ZXso\",<-- OPTIONAL (oxd server will use last used ID Token)\n        \"post_logout_redirect_uri\": \"<post logout redirect uri here>\",        <-- OPTIONAL\n        \"state\": \"<site state>\",                                              <-- OPTIONAL\n        \"session_state\": \"<session state>\"                                    <-- OPTIONAL\n    }\n}  Response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"uri\":\"https://<server>/end_session?id_token_hint=<id token>&state=<state>&post_logout_redirect_uri=<...>\"\n    }\n}",
            "title": "OpenID Connect Authentication Overview"
        },
        {
            "location": "/protocol/#uma-resource-server-apis",
            "text": "A client, acting as an  OAuth2 Resource Server ,\nMUST:   Register a protection document (with uma_rs_protect command)  Intercept HTTP call (before actual REST resource call) and check whether it's allowed to proceed with call or reject it according to uma_rs_check_access command response:  Allow access - if response from uma_rs_check_access is \"allowed\" or \"not_protected\" error is returned.  uma_rs_check_access returned \"denied\" with ticket then return back HTTP response     HTTP/1.1 401 Unauthorized\nWWW-Authenticate: UMA realm=\"example\",\n      as_uri=\"https://as.example.com\",\n      ticket=\"016f84e8-f9b9-11e0-bd6f-0021cc6004de\"  - uma_rs_check_access returned \"denied\" without ticket then return back HTTP response  HTTP/1.1 403 Forbidden\nWarning: 199 - \"UMA Authorization Server Unreachable\"  UMA RS Protect resources  Request:  {\n    \"command\":\"uma_rs_protect\",\n    \"params\": {\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",   <- REQUIRED\n        \"resources\":[        <-  REQUIRED as parameter here we have protection json that describes resources on RS\n            {\n                \"path\":\"/photo\",\n                \"conditions\":[\n                    {\n                        \"httpMethods\":[\"GET\"],\n                        \"scopes\":[\n                            \"http://photoz.example.com/dev/actions/view\"\n                        ]\n                    },\n                    {\n                        \"httpMethods\":[\"PUT\", \"POST\"],\n                        \"scopes\":[\n                            \"http://photoz.example.com/dev/actions/all\",\n                            \"http://photoz.example.com/dev/actions/add\"\n                        ],\n                        \"ticketScopes\":[\n                            \"http://photoz.example.com/dev/actions/add\"\n                        ]\n                    }\n                ]\n            },\n            {\n                \"path\":\"/document\",\n                \"conditions\":[\n                    {\n                        \"httpMethods\":[\"GET\"],\n                        \"scopes\":[\n                            \"http://photoz.example.com/dev/actions/view\"\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n}  Response:  {\n    \"status\":\"ok\"\n}  UMA RS Check Access  Request:  {\n    \"command\":\"uma_rs_check_access\",\n    \"params\": {\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",\n        \"rpt\":\"eyJ0 ... NiJ9.eyJ1c ... I6IjIifX0.DeWt4Qu ... ZXso\",    <-- REQUIRED RPT or blank value if absent (not send by RP)\n        \"path\":\"<path of resource>\",                                   <-- REQUIRED Path of resource (e.g. http://rs.com/phones), /phones should be passed\n        \"http_method\":\"<http method of RP request>\"                    <-- REQUIRED Http method of RP request (GET, POST, PUT, DELETE)\n    }\n}  Sample of RP request:  GET /users/alice/album/photo HTTP/1.1\nAuthorization: Bearer vF9dft4qmT\nHost: photoz.example.com  Params:  rpt: 'vF9dft4qmT'\npath: /users/alice/album/photo\nhttp_method: GET  Access Granted response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"access\":\"granted\"\n    }\n}  Access Denied with ticket response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"access\":\"denied\"\n        \"www-authenticate_header\":\"UMA realm=\\\"example\\\",\n                                   as_uri=\\\"https://as.example.com\\\",\n                                   error=\\\"insufficient_scope\\\",\n                                   ticket=\\\"016f84e8-f9b9-11e0-bd6f-0021cc6004de\\\"\",\n        \"ticket\":\"016f84e8-f9b9-11e0-bd6f-0021cc6004de\"\n    }\n}  Access Denied without ticket response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"access\":\"denied\"\n    }\n}  Errors:  Resource is not protected  {\n    \"status\":\"error\",\n    \"data\":{\n        \"error\":\"invalid_request\",\n        \"error_description\":\"Resource is not protected. Please protect your resource first with uma_rs_protect command.\"\n    }\n}",
            "title": "UMA Resource Server API's"
        },
        {
            "location": "/protocol/#uma-client-apis",
            "text": "If your appliation is calling UMA protected resources, use these API's to obtain an RPT token.  UMA RP - Get RPT  For latest and most up to date parameters of command please check latest successful  jenkins build  Request:  {\n    \"command\":\"uma_rp_get_rpt\",\n    \"params\": {\n         \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",  <- REQUIRED\n         \"force_new\": false                                <- REQUIRED indicates whether return new RPT, in general should be false, so oxd server can cache/reuse same RPT\n    }\n}  Response:  {\n     \"status\":\"ok\",\n     \"data\":{\n         \"rpt\":\"vF9dft4qmT\"\n     }\n}  UMA RP - Authorize RPT  Request:  {\n    \"command\":\"uma_rp_authorize_rpt\",\n    \"params\": {\n         \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",  <- REQUIRED\n         \"rpt\": \"vF9dft4qmT\",                              <- REQUIRED\n         \"ticket\": \"016f84e8-f9b9-11e0-bd6f-0021cc6004de\"  <- REQUIRED\n    }\n}  Authorized Response (Success):  {\n     \"status\":\"ok\",\n}  Not authorized error:  {\n    \"status\":\"error\",\n    \"data\":{\n        \"code\":\"not_authorized\",\n        \"description\":\"RPT is not authorized.\"\n    }\n}  Invalid ticket error:  {\n    \"status\":\"error\",\n    \"data\":{\n        \"code\":\"invalid_ticket\",\n        \"description\":\"Ticket is not valid (outdated or not present on Authorization Server).\"\n    }\n}  Invalid rpt error:  {\n    \"status\":\"error\",\n    \"data\":{\n        \"code\":\"invalid_rpt\",\n        \"description\":\"RPT is not valid (outdated or not present on Authorization Server).\"\n    }\n}",
            "title": "UMA Client API's"
        },
        {
            "location": "/protocol/#gluu-oauth2-access-management-apis",
            "text": "GAT stands for Gluu Access Token. It is invented by Gluu and is described here: \nhttps://ox.gluu.org/doku.php?id=uma:oauth2_access_management.  Request:  {\n    \"command\":\"uma_rp_get_gat\",\n    \"params\": {\n         \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",  <- REQUIRED\n         \"scopes\": [                                       <- REQUIRED RP should know required scopes in advance\n             \"http://photoz.example.com/dev/actions/add\",\n             \"http://photoz.example.com/dev/actions/view\",\n             \"http://photoz.example.com/dev/actions/edit\"\n         ]\n    }\n}  Response:  {\n     \"status\":\"ok\",\n     \"data\":{\n         \"rpt\":\"fg6vF9dft4qmT\"\n     }\n}",
            "title": "Gluu OAuth2 Access Management API's"
        },
        {
            "location": "/protocol/#references",
            "text": "UMA 1.0.1 Specification  Sample RS of Java Resteasy HTTP interceptor of uma-rs",
            "title": "References"
        },
        {
            "location": "/install/",
            "text": "oxd Server Installation/Configuration\n\n\nUbuntu 14.04(trusty)\n\n\nUbuntu 16.04(xenial)\n\n\nDebian 8 (Jessie)\n\n\nCentOS 6\n\n\nCentOS 7\n\n\nRHEL 6\n\n\nRHEL 7\n\n\nManual installation\n\n\nWindows\n\n\nUnix\n\n\n\n\n\n\nManual Build oxd Server\n\n\n\n\n\n\n\n\n\n\noxd Server Installation/Configuration\n\n\nThe easiest way to install oxd is to use one of the Linux packages.\n\n\nUbuntu 14.04(trusty)\n\n\n# echo \"deb https://repo.gluu.org/ubuntu/ trusty main\" > /etc/apt/sources.list.d/gluu-repo.list\n# curl https://repo.gluu.org/ubuntu/gluu-apt.key | apt-key add -\n# apt-get update\n# apt-get install gluu-oxd-server\n# service gluu-oxd-server start\n\n\n\n\nUbuntu 16.04(xenial)\n\n\necho \"deb https://repo.gluu.org/ubuntu/ xenial main\" > /etc/apt/sources.list.d/gluu-repo.list\ncurl https://repo.gluu.org/ubuntu/gluu-apt.key | apt-key add -\napt-get update\napt-get install gluu-oxd-server\nservice gluu-oxd-server start\n\n\n\n\nDebian 8 (Jessie)\n\n\necho \"deb https://repo.gluu.org/debian/ jessie main\" > /etc/apt/sources.list.d/gluu-repo.list\ncurl https://repo.gluu.org/debian/gluu-apt.key | apt-key add -\napt-get update\napt-get install gluu-oxd-server\nservice gluu-oxd-server start\n\n\n\n\nCentOS 6\n\n\n# wget https://repo.gluu.org/centos/Gluu-centos6.repo -O /etc/yum.repos.d/Gluu.repo\n# wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# yum clean all\n# yum install gluu-oxd-server\n# service gluu-oxd-server start\n\n\n\n\nCentOS 7\n\n\n# wget https://repo.gluu.org/centos/Gluu-centos7.repo -O /etc/yum.repos.d/Gluu.repo\n# wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# yum clean all\n# yum install gluu-oxd-server\n# service gluu-oxd-server start\n\n\n\n\nRHEL 6\n\n\n# wget https://repo.gluu.org/rhel/Gluu-rhel6.repo -O /etc/yum.repos.d/Gluu.repo\n# wget https://repo.gluu.org/rhel/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# yum clean all\n# yum install gluu-oxd-server\n# service gluu-oxd-server start\n\n\n\n\nRHEL 7\n\n\nwget https://repo.gluu.org/rhel/Gluu-rhel7.repo -O /etc/yum.repos.d/Gluu.repo\nwget https://repo.gluu.org/rhel/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\nrpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\nyum clean all\nyum install gluu-oxd-server\nservice gluu-oxd-server start\n\n\n\n\nManual installation\n\n\nIf you don't want to use one of the Unix packages, oxd is pretty easy to install. It requires\nJava version 1.7 or higher. But otherwise it's self-contained, and you can just unzip the folder \nand run it.\n\n\nIt is not necessary to install oxd in Windows, it can be downloaded and run. The \noxd Server\n is \navailable for download from \nmaven repository\n.\n\n\nWindows\n\n\n\n\n\n\nMake a folder called \noxd-server\n (or whatever you like)\n\n\n\n\n\n\nUnzip the \nzip distribution\n\nin the above folder you just created.\n\n\n\n\n\n\nRun \noxd-server/bin/oxd-start.bat\n\n\n\n\n\n\nUnix\n\n\n\n\n\n\nMake a folder called \noxd-server\n (or whatever you like), and \ncd\n to this folder\n\n\n\n\n\n\n$ wget http://ox.gluu.org/maven/org/xdi/oxd-server/2.4.4/oxd-server-2.4.4-distribution.zip\n\n\n\n\n\n\n$ unzip oxd-server-2.4.4-distribution.zip\n\n\n\n\n\n\n$ nohup bin/oxd-start.sh &\n\n\n\n\n\n\nManual Build oxd Server\n\n\nIf you're a Java geek, oxd server can be built using \nMaven\n.\n\n\nThe code is available in \nGithub\n. A zip file can be \ndownloaded directly from \nthis link\n. \n\n\nThe following command can be run inside the oxd folder to run the build:\n\n\n  $ mvn clean package",
            "title": "Installation"
        },
        {
            "location": "/install/#oxd-server-installationconfiguration",
            "text": "The easiest way to install oxd is to use one of the Linux packages.",
            "title": "oxd Server Installation/Configuration"
        },
        {
            "location": "/install/#ubuntu-1404trusty",
            "text": "# echo \"deb https://repo.gluu.org/ubuntu/ trusty main\" > /etc/apt/sources.list.d/gluu-repo.list\n# curl https://repo.gluu.org/ubuntu/gluu-apt.key | apt-key add -\n# apt-get update\n# apt-get install gluu-oxd-server\n# service gluu-oxd-server start",
            "title": "Ubuntu 14.04(trusty)"
        },
        {
            "location": "/install/#ubuntu-1604xenial",
            "text": "echo \"deb https://repo.gluu.org/ubuntu/ xenial main\" > /etc/apt/sources.list.d/gluu-repo.list\ncurl https://repo.gluu.org/ubuntu/gluu-apt.key | apt-key add -\napt-get update\napt-get install gluu-oxd-server\nservice gluu-oxd-server start",
            "title": "Ubuntu 16.04(xenial)"
        },
        {
            "location": "/install/#debian-8-jessie",
            "text": "echo \"deb https://repo.gluu.org/debian/ jessie main\" > /etc/apt/sources.list.d/gluu-repo.list\ncurl https://repo.gluu.org/debian/gluu-apt.key | apt-key add -\napt-get update\napt-get install gluu-oxd-server\nservice gluu-oxd-server start",
            "title": "Debian 8 (Jessie)"
        },
        {
            "location": "/install/#centos-6",
            "text": "# wget https://repo.gluu.org/centos/Gluu-centos6.repo -O /etc/yum.repos.d/Gluu.repo\n# wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# yum clean all\n# yum install gluu-oxd-server\n# service gluu-oxd-server start",
            "title": "CentOS 6"
        },
        {
            "location": "/install/#centos-7",
            "text": "# wget https://repo.gluu.org/centos/Gluu-centos7.repo -O /etc/yum.repos.d/Gluu.repo\n# wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# yum clean all\n# yum install gluu-oxd-server\n# service gluu-oxd-server start",
            "title": "CentOS 7"
        },
        {
            "location": "/install/#rhel-6",
            "text": "# wget https://repo.gluu.org/rhel/Gluu-rhel6.repo -O /etc/yum.repos.d/Gluu.repo\n# wget https://repo.gluu.org/rhel/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# yum clean all\n# yum install gluu-oxd-server\n# service gluu-oxd-server start",
            "title": "RHEL 6"
        },
        {
            "location": "/install/#rhel-7",
            "text": "wget https://repo.gluu.org/rhel/Gluu-rhel7.repo -O /etc/yum.repos.d/Gluu.repo\nwget https://repo.gluu.org/rhel/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\nrpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\nyum clean all\nyum install gluu-oxd-server\nservice gluu-oxd-server start",
            "title": "RHEL 7"
        },
        {
            "location": "/install/#manual-installation",
            "text": "If you don't want to use one of the Unix packages, oxd is pretty easy to install. It requires\nJava version 1.7 or higher. But otherwise it's self-contained, and you can just unzip the folder \nand run it.  It is not necessary to install oxd in Windows, it can be downloaded and run. The  oxd Server  is \navailable for download from  maven repository .  Windows    Make a folder called  oxd-server  (or whatever you like)    Unzip the  zip distribution \nin the above folder you just created.    Run  oxd-server/bin/oxd-start.bat    Unix    Make a folder called  oxd-server  (or whatever you like), and  cd  to this folder    $ wget http://ox.gluu.org/maven/org/xdi/oxd-server/2.4.4/oxd-server-2.4.4-distribution.zip    $ unzip oxd-server-2.4.4-distribution.zip    $ nohup bin/oxd-start.sh &",
            "title": "Manual installation"
        },
        {
            "location": "/install/#manual-build-oxd-server",
            "text": "If you're a Java geek, oxd server can be built using  Maven .  The code is available in  Github . A zip file can be \ndownloaded directly from  this link .   The following command can be run inside the oxd folder to run the build:    $ mvn clean package",
            "title": "Manual Build oxd Server"
        },
        {
            "location": "/config/",
            "text": "Configuration\n\n\noxD configuration consists of two files :\n\n\n\n\nconf/oxd-conf.json\n - general configuration\n\n\nconf/oxd-default-site-config.json\n - fallback configuration for \"Register site\" command, see details on \n\nProtocol page\n\n\n\n\noxd-conf.json\n\n\nThe contents of the configuration file is as follows:\n\n\noxd-conf.json\n{\n    \"port\":8099,\n    \"localhost_only\":true,\n    \"time_out_in_seconds\":0,\n    \"use_client_authentication_for_pat\":true,\n    \"use_client_authentication_for_aat\":true,\n    \"trust_all_certs\":true,\n    \"trust_store_path\":\"\",\n    \"trust_store_password\":\"\",\n    \"license_id\":\"\",\n    \"public_key\":\"\",\n    \"public_password\":\"\",\n    \"license_password\":\"\",\n    \"support-google-logout\": true,\n    \"state_expiration_in_minutes\":5,\n    \"nonce_expiration_in_minutes\":5\n}\n\n\n\n\n\n\nport - oxD socket port\n\n\nlocalhost_only - flag to restrict communication\n\n\ntime_out_in_seconds - time out for oxd socket in seconds. oxd closes sockets automatically after this time out (stops listen commands). Zero means listen indefinitely.\n\n\nuse_client_authentication_for_pat - true if client authentication is required, if false than user authentication is performed which require user_id and user_secret specified during register_site command.\n\n\nuse_client_authentication_for_aat - true if client authentication is required, if false than user authentication is performed which require user_id and user_secret specified during register_site command.\n\n\ntrust_all_certs - true to trust all certificates, if false then trust_store_path must be specified to store with valid certificates\n\n\ntrust_store_path - Path to Java .jks trust store to be used for an SSL connection.\n\n\ntrust_store_password - password of trust store\n\n\nlicense_id - Will be supplied when you order a license.\n\n\npublic_key - Will be supplied when you order a license. It's very big--make sure you it's one line with no spaces (if your mail client added line breaks).\n\n\npublic_password - Will be supplied when you order a license.\n\n\nlicense_password - Will be supplied when you order a license.\n\n\nsupport-google-logout - used only if Google is used as OP\n\n\nstate_expiration_in_minutes - state expiration time in minutes\n\n\nnonce_expiration_in_minutes - nonce expiration time in minutes\n\n\n\n\noxd-default-site-config.json\n\n\nconf/oxd-default-site-config.json\n{\n    \"op_host\":\"\",\n    \"authorization_redirect_uri\":\"\",\n    \"post_logout_redirect_uri\":\"\",\n    \"response_types\":[\"code\"],\n    \"grant_type\":[\"authorization_code\"],\n    \"acr_values\":[\"basic\"],\n    \"scope\":[\"openid\", \"profile\"],\n    \"ui_locales\":[\"en\"],\n    \"claims_locales\":[\"en\"],\n    \"client_jwks_uri\":\"\",\n    \"contacts\":[]\n}\n\n\n\n\n\n\nop_host - must point to a valid \nGluu Server CE installation\n. (Sample : \"op_host\":\"https://idp.example.org\")\n\n\nauthorization_redirect_uri - URL that the OpenID Connect Provider (OP) will redirect the person to after  successful authentication\n\n\npost_logout_redirect_uri - URL to which the RP is requesting that the End-User's User Agent be redirected after a logout has been performed\n\n\nresponse_types - JSON array containing a list of the OAuth 2.0 response_type values that the site is declaring that it will restrict itself to using\n\n\ngrant_type - JSON array containing a list of the OAuth 2.0 Grant Types that the Client is declaring that it will restrict itself to using\n\n\nacr_values - specified authentication method (basic, duo, u2f)\n\n\nscope - JSON array containing a list of the scopes that the Client is declaring that it will restrict itself to using\n\n\nui_locales - End-User's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference\n\n\nclaims_locales - End-User's preferred languages and scripts for Claims being returned, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference\n\n\ncontacts - array of e-mail addresses of people responsible for this Client\n\n\n\n\nUsing Google as an OpenID Provider\n\n\nGoogle doesn't support the dynamic registration of clients. The clients need to\nbe created in the Google API Console. Google's \nOpenID Connect page\n\ngives the complete instructions of how to setup a OpenID Client. Obtain the\n\nclient_id\n and the \nclient_secret\n by following the guide's\n\nSetting up OAuth 2.0\n section and set the callback URI to which users will be\nredirected after authentication.\n\n\n\n\nSample Values:\n\n\nop_host = https://accounts.google.com\nredirect_uri = https://test-project.com/login_callback/\nclient_id = r7lq4g7n9rb1.apps.googleusercontent.com\nclient_secret = 2YOesq2bRCaPI4Ybwc\n\n\n\n\nNote:\n scope should always have \nopenid\n as the first value followed by \nprofile\n or \nemail\n or both. Refer \nGoogle's OIDC docs\n for the complete explanation of the Google specific paramaters.",
            "title": "Configuration"
        },
        {
            "location": "/config/#configuration",
            "text": "oxD configuration consists of two files :   conf/oxd-conf.json  - general configuration  conf/oxd-default-site-config.json  - fallback configuration for \"Register site\" command, see details on  Protocol page",
            "title": "Configuration"
        },
        {
            "location": "/config/#oxd-confjson",
            "text": "The contents of the configuration file is as follows:  oxd-conf.json\n{\n    \"port\":8099,\n    \"localhost_only\":true,\n    \"time_out_in_seconds\":0,\n    \"use_client_authentication_for_pat\":true,\n    \"use_client_authentication_for_aat\":true,\n    \"trust_all_certs\":true,\n    \"trust_store_path\":\"\",\n    \"trust_store_password\":\"\",\n    \"license_id\":\"\",\n    \"public_key\":\"\",\n    \"public_password\":\"\",\n    \"license_password\":\"\",\n    \"support-google-logout\": true,\n    \"state_expiration_in_minutes\":5,\n    \"nonce_expiration_in_minutes\":5\n}   port - oxD socket port  localhost_only - flag to restrict communication  time_out_in_seconds - time out for oxd socket in seconds. oxd closes sockets automatically after this time out (stops listen commands). Zero means listen indefinitely.  use_client_authentication_for_pat - true if client authentication is required, if false than user authentication is performed which require user_id and user_secret specified during register_site command.  use_client_authentication_for_aat - true if client authentication is required, if false than user authentication is performed which require user_id and user_secret specified during register_site command.  trust_all_certs - true to trust all certificates, if false then trust_store_path must be specified to store with valid certificates  trust_store_path - Path to Java .jks trust store to be used for an SSL connection.  trust_store_password - password of trust store  license_id - Will be supplied when you order a license.  public_key - Will be supplied when you order a license. It's very big--make sure you it's one line with no spaces (if your mail client added line breaks).  public_password - Will be supplied when you order a license.  license_password - Will be supplied when you order a license.  support-google-logout - used only if Google is used as OP  state_expiration_in_minutes - state expiration time in minutes  nonce_expiration_in_minutes - nonce expiration time in minutes",
            "title": "oxd-conf.json"
        },
        {
            "location": "/config/#oxd-default-site-configjson",
            "text": "conf/oxd-default-site-config.json\n{\n    \"op_host\":\"\",\n    \"authorization_redirect_uri\":\"\",\n    \"post_logout_redirect_uri\":\"\",\n    \"response_types\":[\"code\"],\n    \"grant_type\":[\"authorization_code\"],\n    \"acr_values\":[\"basic\"],\n    \"scope\":[\"openid\", \"profile\"],\n    \"ui_locales\":[\"en\"],\n    \"claims_locales\":[\"en\"],\n    \"client_jwks_uri\":\"\",\n    \"contacts\":[]\n}   op_host - must point to a valid  Gluu Server CE installation . (Sample : \"op_host\":\"https://idp.example.org\")  authorization_redirect_uri - URL that the OpenID Connect Provider (OP) will redirect the person to after  successful authentication  post_logout_redirect_uri - URL to which the RP is requesting that the End-User's User Agent be redirected after a logout has been performed  response_types - JSON array containing a list of the OAuth 2.0 response_type values that the site is declaring that it will restrict itself to using  grant_type - JSON array containing a list of the OAuth 2.0 Grant Types that the Client is declaring that it will restrict itself to using  acr_values - specified authentication method (basic, duo, u2f)  scope - JSON array containing a list of the scopes that the Client is declaring that it will restrict itself to using  ui_locales - End-User's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference  claims_locales - End-User's preferred languages and scripts for Claims being returned, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference  contacts - array of e-mail addresses of people responsible for this Client",
            "title": "oxd-default-site-config.json"
        },
        {
            "location": "/config/#using-google-as-an-openid-provider",
            "text": "Google doesn't support the dynamic registration of clients. The clients need to\nbe created in the Google API Console. Google's  OpenID Connect page \ngives the complete instructions of how to setup a OpenID Client. Obtain the client_id  and the  client_secret  by following the guide's Setting up OAuth 2.0  section and set the callback URI to which users will be\nredirected after authentication.   Sample Values:  op_host = https://accounts.google.com\nredirect_uri = https://test-project.com/login_callback/\nclient_id = r7lq4g7n9rb1.apps.googleusercontent.com\nclient_secret = 2YOesq2bRCaPI4Ybwc  Note:  scope should always have  openid  as the first value followed by  profile  or  email  or both. Refer  Google's OIDC docs  for the complete explanation of the Google specific paramaters.",
            "title": "Using Google as an OpenID Provider"
        },
        {
            "location": "/logs/",
            "text": "Logs\n\n\nLogs are written into the working directory in \noxd Server\n by default. \nCustom log locations can be specified in \nlog4j.xml.\n The file is \nloaded using the \nlog4j.configuration\n system property. The following \nis an example for running the \noxd Server\n with \nlog4j\n with the file \nlocated in \nC:\\tmp\\test\\log4j.xml\n.\n\n\n# java -cp resteasy-jaxrs-2.3.4.Final.jar;oxd-server-1.0-SNAPSHOT-jar-with-dependencies.jar org.xdi.oxd.server.ServerLauncher -Doxd.server.config=C:\\tmp\\oxd.json -Dlog4j.configuration=C:\\tmp\\test\\log4j.xml\n\n\n\n\nThe following is an example of \nlog4j.xml\n file:\n\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n\n<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\" debug=\"false\">\n\n    <appender name=\"CONSOLE\" class=\"org.apache.log4j.ConsoleAppender\">\n        <layout class=\"org.apache.log4j.PatternLayout\">\n            <!-- The default pattern: Date Priority [Category] Message\\n -->\n            <param name=\"ConversionPattern\" value=\"%d %-5p [%c] %m%n\"/>\n        </layout>\n    </appender>\n\n    <appender name=\"FILE\" class=\"org.apache.log4j.DailyRollingFileAppender\">\n        <param name=\"File\" value=\"C:\\\\tmp\\\\test\\\\oxd-server.log\"/>\n        <param name=\"DatePattern\" value=\"'.'yyyy-MM-dd\"/>\n        <param name=\"BufferSize\" value=\"1000\"/>\n        <layout class=\"org.apache.log4j.PatternLayout\">\n            <!-- The default pattern: Date Priority [Category] Message\\n -->\n            <param name=\"ConversionPattern\" value=\"%d %-5p [%c] %m%n\"/>\n        </layout>\n    </appender>\n\n    <category name=\"org.xdi\">\n        <priority value=\"TRACE\"/>\n    </category>\n\n    <root>\n        <priority value=\"INFO\"/>\n        <appender-ref ref=\"FILE\"/>\n        <appender-ref ref=\"CONSOLE\"/>\n    </root>\n\n</log4j:configuration>",
            "title": "Logs"
        },
        {
            "location": "/logs/#logs",
            "text": "Logs are written into the working directory in  oxd Server  by default. \nCustom log locations can be specified in  log4j.xml.  The file is \nloaded using the  log4j.configuration  system property. The following \nis an example for running the  oxd Server  with  log4j  with the file \nlocated in  C:\\tmp\\test\\log4j.xml .  # java -cp resteasy-jaxrs-2.3.4.Final.jar;oxd-server-1.0-SNAPSHOT-jar-with-dependencies.jar org.xdi.oxd.server.ServerLauncher -Doxd.server.config=C:\\tmp\\oxd.json -Dlog4j.configuration=C:\\tmp\\test\\log4j.xml  The following is an example of  log4j.xml  file:  <?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n\n<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\" debug=\"false\">\n\n    <appender name=\"CONSOLE\" class=\"org.apache.log4j.ConsoleAppender\">\n        <layout class=\"org.apache.log4j.PatternLayout\">\n            <!-- The default pattern: Date Priority [Category] Message\\n -->\n            <param name=\"ConversionPattern\" value=\"%d %-5p [%c] %m%n\"/>\n        </layout>\n    </appender>\n\n    <appender name=\"FILE\" class=\"org.apache.log4j.DailyRollingFileAppender\">\n        <param name=\"File\" value=\"C:\\\\tmp\\\\test\\\\oxd-server.log\"/>\n        <param name=\"DatePattern\" value=\"'.'yyyy-MM-dd\"/>\n        <param name=\"BufferSize\" value=\"1000\"/>\n        <layout class=\"org.apache.log4j.PatternLayout\">\n            <!-- The default pattern: Date Priority [Category] Message\\n -->\n            <param name=\"ConversionPattern\" value=\"%d %-5p [%c] %m%n\"/>\n        </layout>\n    </appender>\n\n    <category name=\"org.xdi\">\n        <priority value=\"TRACE\"/>\n    </category>\n\n    <root>\n        <priority value=\"INFO\"/>\n        <appender-ref ref=\"FILE\"/>\n        <appender-ref ref=\"CONSOLE\"/>\n    </root>\n\n</log4j:configuration>",
            "title": "Logs"
        },
        {
            "location": "/",
            "text": "Welcome to the oxd Documentation\n\n\nIntroduction\n\n\noxd is a mediator, a service demon that listens on localhost, providing easy APIs that can be called by a web application to simplify using an external OAuth2 server for authentication or authorization. oxd is not a proxy--sometimes it makes API calls on behalf of an application, but other times it just forms the right URLs and returns them to the application. \n\n\nOne significant advantage of using oxd over a native client library is that oxd consolidates the OAuth2 code in one package. If there are updates to the OAuth2 client code, you can update the oxd-server package, without changing the interface to the application.\n\n\n\n\nLicense\n\n\noxd is \ncommercial software\n licensed by Gluu. Each deployment of the oxd server requires a license. To purchase licenses, visit the \noxd webpage\n.# OXD Docs",
            "title": "2.4.4"
        },
        {
            "location": "/#welcome-to-the-oxd-documentation",
            "text": "",
            "title": "Welcome to the oxd Documentation"
        },
        {
            "location": "/#introduction",
            "text": "oxd is a mediator, a service demon that listens on localhost, providing easy APIs that can be called by a web application to simplify using an external OAuth2 server for authentication or authorization. oxd is not a proxy--sometimes it makes API calls on behalf of an application, but other times it just forms the right URLs and returns them to the application.   One significant advantage of using oxd over a native client library is that oxd consolidates the OAuth2 code in one package. If there are updates to the OAuth2 client code, you can update the oxd-server package, without changing the interface to the application.",
            "title": "Introduction"
        },
        {
            "location": "/#license",
            "text": "oxd is  commercial software  licensed by Gluu. Each deployment of the oxd server requires a license. To purchase licenses, visit the  oxd webpage .# OXD Docs",
            "title": "License"
        }
    ]
}